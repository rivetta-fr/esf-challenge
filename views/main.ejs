<div class="wrapper">
  <div class="logo"><a href="/"><img src="/images/veryroadtrip.png" alt="Very Road Trip"></a></div>
  <!--START BURGER -->
  <div id="burger_btn" class="material-icons"></div>
  <!--END BURGER -->
  <nav id="menu">
    <ul id="items-menu" >
        <!-- Menu Items to show when we don't show itinerary -->
        <li class="menu-item menu-item-activity menunoitinerary"><a href="#" class="link-menu"></a></li>
        <li class="menu-item menu-item-poi menunoitinerary"><a href="#" class="link-menu"></a></li>
        <!-- Menu Items to show when we show itinerary -->
        <li class="menu-item menu-item-settings menuwithitinerary"><a href="#settings" class="link-menu"></a></li>
        <li class="menu-item menu-item-narrative menuwithitinerary"><a href="#" class="link-menu"></a></li>

        <li class="menu-item menu-item-break menuwithitinerary"><a href="#" class="link-menu"></a></li>
        <% console.log(user); %>
    <% if(typeof user.ac_id == 'undefined' || user.ac_id == ""){ %>
        <!-- Menu Items to show when user didn't made Login -->
        <li class="menu-item menu-item-login"><a href="#login" class="link-menu"></a></li>
    <% } else { %>
            <!-- Menu Items to show when user Logged -->
        <li class="menu-item menu-item-save menuwithitinerary"><a href="#" class="link-menu"></a></li>
        <li class="menu-item menu-item-myitineraries"><a href="/myitineraries" class="link-menu"></a></li>
        <li class="menu-item menu-item-logout"><a href="/logout" class="link-menu"></a></li>
    <% } %>
      <li class="menu-item menu-item-contact"><a href="https://veryroadtrip.eu/" class="link-menu"></a></li>
       <!--<li class="menu-item menu-item-weather"><a href="#" class="link-menu"></a></li>
       <li class="menu-item menu-item-warning"><a href="#" class="link-menu"></a></li> -->
    </ul>
  </nav>
  <main >
    <div id="mapid"></div>
    <div><a id="add-itinerary" class="add-itinerary" href="#new-itinerary"></a></div>
    <div><a id="navigation" class="navigation" href="#"></a></div>
  </main>
  <footer >
        <img class="logobottom" src="images/very-road-trip-bottom.jpg" alt="Very Road Trip"><p><a href="tel:+33-6-58-64-74-02">06 58 64 74 02</a></p>
  </footer>
</div>

<!-- MODAL DIALOG FOR Itinerary FORM -->
<div role="dialog" aria-modal="true" aria-label="New Itinerary form" class="modal new-itinerary">
      <a href="#"><span id="closemodalx" class="closemodal"></span></a>
      <form enctype="multipart/form-data" id="new-itinerary-form" action="newitinerary" method="post" name="new-itinerary-form" class="new-itinerary-form">
        <div class="form-group">
             <label for="departure"><%= __('Departure') %></label><input id="departure" class="form-control" type="text" name="departure" required autofocus placeholder="<%= __('Departure') %>" autocomplete="departure">
         </div>
         <div class="form-group">
             <label for="arrival"><%= __('Arrival') %></label><input id="arrival" class="form-control" type="text" name="arrival" required placeholder="<%= __('Arrival') %>" autocomplete="arrival">
         </div>
         <div class="form-group">
             <div id="loading-img" class="loading-img"></div>
             <input id="itinerarysubmitbuttom" class="btn btn-perso btn-lg" type="submit" value="<%= __('Confirm') %>">
         </div>
     </form>
</div>
<!-- END MODAL DIALOG FOR Itinerary FORM -->

<!-- MODAL DIALOG FOR Settings FORM -->
<div role="dialog" aria-modal="true" aria-label="Settings form" class="modal settings">
      <a href="#"><span id="closemodalx" class="closemodal"></span></a>
      <form enctype="multipart/form-data" id="settings-form" action="settings" method="post" name="settings-form" class="settings-form">
        <div class="form-group">
             <label for="settingsstartdatetime"><%= __('Start Date-time') %></label><input id="settingsstartdatetime" class="form-control" type="datetime-local" name="settingsstartdatetime" autofocus placeholder="<%= __('Start Date') %>" autocomplete="settingsstartdatetime">
         </div>
         <!--
             <div class="form-group">
             <label for="settingsstarttime"><%= __('Start Time') %></label><input id="settingsstarttime" class="form-control" type="text" name="settingsstarttime" placeholder="<%= __('Start Time') %>" autocomplete="settingsstarttime">
         </div>
         -->

         <div class="custom-control custom-radio custom-control-inline">
            <input type="radio" id="settingspoiact" class="custom-control-input" name="settingstype" value="all" checked>
            <label class="custom-control-label" for="settingspoiact"><%= __('All'); %></label>
         </div>
         <div class="custom-control custom-radio custom-control-inline">
            <input type="radio" id="settingspoi" class="custom-control-input" name="settingstype" value="poi" >
            <label class="custom-control-label" for="settingspoi"><%= __('Only Points of interest'); %></label>
        </div>
        <div class="custom-control custom-radio custom-control-inline">
            <input type="radio" id="settingsact" class="custom-control-input" name="settingstype" value="act" >
            <label class="custom-control-label" for="settingsact"><%= __('Only activities'); %></label>
        </div>
         <div class="form-group">
             <div id="loading-img" class="loading-img"></div>
             <input id="settingssubmitbuttom" class="btn btn-perso btn-lg" type="submit" value="<%= __('Update Itinerary') %>">
         </div>
     </form>
</div>
<!-- END MODAL DIALOG FOR Settings FORM -->

<!-- MODAL DIALOG FOR LOGIN FORM -->
<div role="dialog" aria-modal="true" aria-label="Login form" class="modal login">
    <a href="#"><span id="closemodalx" class="closemodal"></span></a>
    <!-- LOGIN FORM -->
    <% if (typeof message != 'undefined' && typeof messagetype != 'undefined') {   %>
        <div class="row"><p class="col-sm-6 offset-sm-3 alert <%= messagetype %> "><%= message %></p></div>
    <%
    } %>
    <form name="loginform" id="loginform" action="/login" method="post">
        <div class="form-group">
            <label for="email"><%= __('Email') %></label>
            <input id="email" type="email" class="form-control" name="email">
        </div>
        <div class="form-group">
            <label for="password"><%= __('Password') %></label>
            <input id="password" type="password" class="form-control" name="password">
        </div>
        <div class="custom-control custom-checkbox remember" >
            <input id="remember" type="checkbox" class="custom-control-input ml-3" name="remember" value="yes">
            <label class="custom-control-label" for="remember"><%= __('Remember Me') %></label>
        </div>
        <div class="text-center"><button type="submit" class="btn btn-perso btn-lg"><%= __('Login') %></button></div>
    </form>
    <hr>
    <p><a href="/forgot"><%= __('Forgot Password') %>?</a></p>
    <p><%= __('Need an account') %>? <a href="/signup"><%= __('Signup') %></a>.</p>
</div>
<!-- END MODAL DIALOG FOR LOGIN FORM -->

<div class="modal-overlay"></div>
<!-- SCRIPT CALLS FOR MAIN PAGE -->
<script src="/leaflet/leaflet.js"></script>
<script src="https://api.mqcdn.com/sdk/mapquest-js/v1.3.2/mapquest.js"></script>

<script>

//BURGER MENU
$(document).on('click','#burger_btn', function(){
    $('#menu').fadeToggle('slow');
});

/**** ======================= MODAL update ===================== */

// Define values for keycodes
const VK_ESCAPE     = 27;
const VK_TAB        = 9;
var modalOverlay = document.querySelector('.modal-overlay');
var modal;
let modals = document.querySelectorAll('.modal');

// OPENMODAL FOR LIGHTBOX OR ALERT DIALOG
function openModal(target) {

    console.log(modals);
    for (let i = 0; i < modals.length; i++) {
        modals[i].style.display = 'none';
    }

    modal = document.querySelector(target);
    // Will hold previously focused element // Save current focus
    //let focusedElementBeforeModal= document.activeElement;
    // Find the modal and its overlay
    // Listen for and trap the keyboard
    modal.addEventListener('keydown', trapTabKey);

    // Listen for indicators to close the modal
    $(document).on('click', '.modal-overlay, .closemodal ',function(e){
        e.preventDefault();
        closeModal();
        return false;
      } );

    // Find all focusable children
    const focusableElementsString = 'a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), iframe, object, embed, [tabindex="0"], [contenteditable]';
    let focusableElements = modal.querySelectorAll(focusableElementsString);
    // Convert NodeList to Array
    focusableElements = Array.prototype.slice.call(focusableElements);

    let firstTabStop = focusableElements[0];
    let lastTabStop = focusableElements[focusableElements.length - 1];

    // Show the modal and overlay
    modal.style.display = 'block';
    modalOverlay.style.display = 'block';

    // Focus first child
    firstTabStop.focus();

    function trapTabKey(e) {
        // Check for TAB key press
        if (e.keyCode === VK_TAB) {
            // SHIFT + TAB
            if (e.shiftKey) {
                if (document.activeElement === firstTabStop) {
                e.preventDefault();
                lastTabStop.focus();
                }
            // TAB
            } else {
                if (document.activeElement === lastTabStop) {
                e.preventDefault();
                firstTabStop.focus();
                }
            }
        }
        // ESCAPE
        if (e.keyCode === VK_ESCAPE) {
        closeModal();
        }
    }
    document.querySelector('.wrapper').setAttribute('aria-hidden', true);
}

// closeMODAL FOR LIGHTBOX OR ALERT DIALOG
function closeModal( ) {
    // Hide the modal and overlay
    modal.style.display = 'none';
    modalOverlay.style.display = 'none';
    modal.querySelectorAll('form')[0].reset();
    document.querySelector('.wrapper').removeAttribute('aria-hidden');
}

// click to open modal
$(document).on('click','#add-itinerary, .menu-item-login a, .menu-item-settings a',function(){
    $('#menu').hide('slow');
    openModal('.'+$(this).attr('href').slice(1));
    return false;
});


//Submit FORM MANAGE
function appendAlert(element,msg){
		$('.alert').remove();
		$(element).after( `<div class="alert alert-danger"><p>${msg}</p></div>`);
        $('.alert').focus();
		return false;
  }

function validateEmail(email) {
    const re = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
    return re.test(String(email).toLowerCase());
}


$('form#new-itinerary-form').submit(function(e) {
    e.preventDefault();
    $('#itinerarysubmitbuttom').hide();
    $('.alert').remove(); // remove previus alerts
    let hasError = false;
    departure = $('#departure').val();
    arrival = $('#arrival').val();
    if(departure == ''){
        appendAlert("#departure", "<%= __('Please insert a departure.') %>");
        hasError = true;
    }
    if(arrival == ''){
        appendAlert("#arrival", "<%= __('Please insert a arrival.') %>");
        hasError = true;
    }
    if(!hasError) {
        getItinerary();
        closeModal();
    }
    $('#itinerarysubmitbuttom').show();
    return false;
});


//Submit FORM settings
function getFormattedTime(){
    var now = new Date();
    var day = ("0" + now.getDate()).slice(-2);
    var month = ("0" + (now.getMonth() + 1)).slice(-2);
    var hours = ("0" + (now.getHours())).slice(-2);
    var minutes = ("0" + (now.getMinutes())).slice(-2);
    return `${now.getFullYear()}-${month}-${day}T${hours}:${minutes}`;

}
$(document).ready(function(){
    settingsstartdate = getFormattedTime();  //yyyy-MM-ddThh:mm
    $("#settingsstartdatetime").val(settingsstartdate);
    $("#settingsstartdatetime").attr("min", settingsstartdate);
});

$(document).on('submit',"#settingsform",function (event) {
    event.preventDefault();
    // Check each field has a value
    if (  this.settingsstartdatetime.value == '' ) {
        appendAlert("#settingsstartdatetime", "<%= __('Vous devez fournir tous les informations demandées. Veuillez réessayer') %>");
        return false;
    }
    this.submit();
});
//END FORM settings

//Submit FORM LOGIN
$(document).on('submit',"#loginform",function (event) {
    event.preventDefault();
    // Check each field has a value
    if (  this.password.value == ''  || this.email.value == '') {
        appendAlert("#password", "<%= __('Vous devez fournir tous les informations demandées. Veuillez réessayer') %>");
        return false;
    }
    if ( !validateEmail(this.email.value) ) {
        appendAlert("#password","<%= __('Vous devez fournir un email valide. Veuillez réessayer') %>");
        this.email.focus();
        return false;
    }
    this.submit();
});
//END FORM LOGIN


/************************** MAP ********************************/

// Configure Globals
const MAPQUESTAPI = 'C58vyjQUAfSJxfYPGOyi0qULtp5amMPU';
// Var for itinerary
var click = 0; // var todefine if first or second click on map
var itinerary, markerd; // markerd == marker of departure
var narrativeControl;
//set map config (key and open data)
L.mapquest.key = MAPQUESTAPI;
L.mapquest.open = true;
// Set Globals Layers
var tileLayer = L.mapquest.tileLayer('map');
var dirlayer = L.layerGroup();
var poiStaticLayer = L.layerGroup();
var actStaticLayer = L.layerGroup();
// Set  globals variables
var departure, arrival, pointActivity, orderedPoints;
var recalcPoiAct = true; // var to hack autopan when click on marker
// SET vars for Navigation
var departureNavApp, arrivalNavApp, pointActivityNavApp;

<% if (typeof departure !== 'undefined' && departure.length > 0) { %> // if land on this page with itinerayr alredy created
  var departureObj =  <%- departure %>;
  departure = L.latLng(departureObj.latitude,departureObj.longitude); // set deparure
  var arrivalObj = <%- arrival %>;
  arrival = L.latLng(arrivalObj.latitude,arrivalObj.longitude); // set arrival
  pointActivity =  <%- waypoints %>;
  getItinerary();
<% }else{ %> // no itineray already created
  departure = "";
  arrival =  "";
<% } %>

// SET MAP
var mymap = L.map('mapid', {
    center: [48.178907, 6.441802], // EPINAL
    zoom: 13,
    layers: tileLayer,
    zoomControl: false
});

// function loadend when on opening app to show radius and geolocalisation user
function onLocationFound(e) { // find location of customer when open app
    var radius = e.accuracy / 2; // accuracy == diameter
    L.marker(e.latlng).addTo(mymap).bindPopup("<%= __('You are within ') %>" + radius + "<%= __(' meters from this point') %>" ).openPopup();
    recalcPoiAct = true;
    L.circle(e.latlng, radius).addTo(mymap); // dessin circle when loacated on the map
}

// Remove narrative
function removeNarrative(){
    if(typeof narrativeControl != 'undefined'){
        narrativeControl.remove();
    }
}

// Remove layers
function removeLayers(layers){
    if(typeof layers != 'undefined' && layers != '' &&  (Object.keys(layers).length !== 0 ) ){
        for(let layer of layers.getLayers() ){ //remove itinerary from map
            layers.removeLayer(layer);
        }
    }
}

// function to set point of departure an arrival on the map
function onMapClick(e) {
    window.click++; // update click number on the map
    if(window.click == 1){ // first click on map == departure
        departure = e.latlng;
        markerd = L.marker(departure);
        dirlayer.addLayer(markerd).addTo(mymap);
        let imgel = '<img class="popup" src="/images/veryroadtrip.png" alt="Very Road Trip">' + "<%= __('Départure, now click on arrival.') %>";
        markerd.bindPopup(imgel).openPopup();
    }
    if(window.click == 2){ // second click on map == arrival
        arrival = e.latlng;
        window.click =0;
        getItinerary(); // calc itinerary
    }
    return false;
}

//extract POI (2) and Activity (1),  bounds == coordinate of limit of map on the screen
function getPA(bounds){
    if(typeof bounds != undefined){
        var params = {
            // get bound of map showed on the screen
            south: bounds.getSouth(),
            west: bounds.getWest(),
            north: bounds.getNorth(),
            east:  bounds.getEast(),
            // some settings
            type: document.querySelector('input[name="settingstype"]:checked').value, // type setting in setting modal form
            datetime : document.getElementById('settingsstartdatetime').value // datetime set in setting modal form
        }
        let urlParams = new URLSearchParams(params);
        let myRequest = new Request(`/poi/list?${urlParams.toString()}`, {
            method: 'GET',
            headers: new Headers({
                    "Content-Type": "application/json"
                })
        });
        return fetch(myRequest).then(function(response) {
             return response.json();
        }).then(function(data) {
            /*
            let max = data.length;
            //create waypoints list
            let  wayPoints = new Array();
            for(let index=0; index<max; index++){ //take only 15 item on list
                wayPoints.push(data[index]);
            }
            */
            return data;
        }).catch(function(error){
            console.log(error);
        });
    }
}


// GET itinerary from mapquest Js api
async function getItinerary(){
     // clean layers
    removeLayers(dirlayer);
    removeLayers(poiStaticLayer);
    removeLayers(actStaticLayer);
    markerd.remove();
    // END  clean layers

    var directions = L.mapquest.directions();

    // If not set itinerary already load poi/act
    if(typeof pointActivity == 'undefined' || pointActivity == '' ||  (Object.keys(pointActivity).length === 0 && pointActivity.constructor === Object ) ){
        var bounds = L.latLngBounds(mymap.getBounds()); // get coordinates of map on the screen
        pointActivity = await getPA(bounds); // get list of poi on map
    }

    // define waypoints list
    let points = [];
    for(let poi of pointActivity ){
        points.push([poi.po_latitude,poi.po_longitude]); // take lat and log for waipoints iteninerary calc
    }

    //extract itinerary using mapquest method
    directions.route({
        start: departure,
        end: arrival,
        waypoints: points,
        optimizeWaypoints : true, // itineray optimized
        options: {
            locale: "fr_FR",
            enhancedNarrative: true // show narrative
        }
    },
    // directions.route callback function
    function(err, data) {
        if (err.message) {
            console.log(err);
        } else {
            // add route ribbon
            orderedPoints = data.route.locations; // get route ordered for optimizated itinerary
            let locationSequence = data.route.locationSequence; // get sequence in order to assing more data for each waipoint
            // START adaptation data for navigation app
            departureNavApp = orderedPoints[0].latLng; //adaptation data departure for navigation app
            arrivalNavApp = orderedPoints[orderedPoints.length-1].latLng; //adaptation data arrival for navigation app
            // adaptation waypoints
            if(orderedPoints.length > 2){
                pointActivityNavApp = [];
                for(let i=1;i<orderedPoints.length-1;i++){
                    pointActivityNavApp.push({"latitude":orderedPoints[i].latLng.lat,"longitude":orderedPoints[i].latLng.lng} ); //adaptation data wayponts for navigation app
                }
            }
            // END adaptation data for navigatio app

            // Directions layer
            var DirectionsLayerWithCustomMarkers = L.mapquest.DirectionsLayer.extend({
                    /*
                    createStartMarker: function(location, stopNumber) {
                        return L.marker(location.latLng, {}).bindPopup('Start');
                    },
                    */
                    // function load for each waypoint maker created
                    createWaypointMarker: function(location, stopNumber) {
                        let index = locationSequence[stopNumber-1]-1;
                        let poiActStop = window.pointActivity[index]; // get data using sequence and stopnumber
                        let name = "<%= __('Not defined.') %>";
                        let src= '/images/veryroadtrip.png';
                        let className;
                        // get name
                        if(typeof poiActStop.po_label != 'undefined' && poiActStop.po_label != "" ){
                            name = poiActStop.po_label;
                            if(typeof poiActStop.po_startdate != 'undefined' && poiActStop.po_startdate != "" && poiActStop.po_startdate != null){
                                name += ` (${poiActStop.po_startdate})`;
                            }
                        }
                        if(typeof poiActStop.po_linkimg != 'undefined' && poiActStop.po_linkimg != "" && poiActStop.po_linkimg != null){
                            src = poiActStop.po_linkimg;
                        }
                        let html = `
                        <article>
                        <img class="popup" src="${src}" alt="${name}">
                        <div>
                            <p>${name}</p>
                            <div><div id="pointActivity-${index}" class="moredets"></div><div id="pointActivity-${index}" class="removemarker"></div></div>
                        </div></article>`;
                        switch(poiActStop.po_type){
                            case 1: //activity 1
                                className = 'acticon';
                                break;
                            case 2: // POI == 2
                                className = 'poiicon';
                                break;
                        }
                        let myIcon = L.divIcon({className: className});
                        return L.marker(location.latLng, {icon: myIcon}).bindPopup(html);

                    }
                });
                itinerary = new DirectionsLayerWithCustomMarkers({
                    directionsResponse: data,
                    routeWhileDragging: true,
                    fitBounds: true,
                    startMarker: {
                        icon: 'circle',
                        iconOptions: {
                        size: 'sm',
                        primaryColor: '#1fc715',
                        secondaryColor: '#1fc715',
                        symbol: 'D'
                        }
                    },
                    endMarker: {
                        icon: 'circle',
                        iconOptions: {
                        size: 'sm',
                        primaryColor: '#e9304f',
                        secondaryColor: '#e9304f',
                        symbol: 'A'
                        }
                    },
                    routeRibbon: {
                        color: "#2aa6ce",
                        opacity: 1.0,
                        showTraffic: true
                    },
                    alternateRouteRibbon: {
                        opacity: 1.0
                    }
                });

            //add narrative
            removeNarrative(); // remove last if exists
            narrativeControl = L.mapquest.narrativeControl({
                position: 'bottomleft',
                className: "narrative",
                directionsResponse: data,
                compactResults: true,
                interactive: true
            });
            narrativeControl.setDirectionsLayer(dirlayer);
            narrativeControl.addTo(mymap);

            // add itinerary to map
            dirlayer.addLayer(itinerary).addTo(mymap);

            // add close link to narrative
            var divClose = document.createElement("div");
            divClose.className = 'narrativeclose';
            document.getElementsByClassName("narrative")[0].appendChild(divClose);

            // replace new itinerary icon with start navigation
            $('#add-itinerary').hide();
            $('#navigation').show();
            $('.menunoitinerary').hide();
            $('.menuwithitinerary').show();
        }
    });

}



//EVENTS

// reset itinerary button
$(document).on('click','.menu-item-break',function(){
    // REset Itinerary
    if(itinerary != ""){
        removeLayers(dirlayer);
    }
    departure = arrival = pointActivity = orderedPoints = "";
    itinerary = "";
    removeNarrative();
    // change icons between cal itinerary and navigation
    $('#navigation').hide();
    $('#add-itinerary').show();
    $('.menuwithitinerary').hide();
    $('.menunoitinerary').show();
    // show static points on map
    getPoiStaticMap();
    return false;
});

// DElete one waypoint on itinerary
$(document).on('click','.removemarker',function(){
    let index = this.id.slice(14); // get marker to remove
    pointActivity.splice(index,1); //remove in array of Waipoints
    getItinerary(); //recalc itinerary
    return false;
});
// reset act button
$(document).on('click','.menu-item-activity',function(){
    $('#menu').hide('slow');
    let actStaticLayers = actStaticLayer.getLayers();
    if(actStaticLayers.length > 0){
        removeLayers(actStaticLayer);
    } else {
        getPoiStaticMap();
    }
    return false;
});

// reset poi button
$(document).on('click','.menu-item-poi',function(){
    $('#menu').hide('slow');
    let poiStaticLayers = poiStaticLayer.getLayers();
    if(poiStaticLayers.length > 0){
        removeLayers(poiStaticLayer);
    } else {
        getPoiStaticMap();
    }
    return false;
});

//close Narrative
$(document).on('click','.narrativeclose',function(e){
    $('.narrative').hide();
    return false;
});

$(document).on('click','.menu-item-narrative',function(e){
    $('#menu').hide('slow');
    $('.narrative').toggle();
    return false;
});

// call fucntion to manage click on the map
mymap.on('click', onMapClick);

async function getPoiStaticMap(){
    if(typeof itinerary == "undefined" || itinerary == ""){
        await getPA(mymap.getBounds()).then((data)=>{
            // clean layers
            removeLayers(poiStaticLayer);
            removeLayers(actStaticLayer);
            //SHOW marker by layer
            for(let poiact of data ){
                let html = "";
                let name = "Pas indiqué";
                let src= '/images/veryroadtrip.png';
                let myIcon;
                if(typeof poiact.po_label != 'undefined' && poiact.po_label != "" ){
                    name = poiact.po_label;
                }
                if(typeof poiact.po_linkimg != 'undefined' && poiact.po_linkimg != "" && poiact.po_linkimg != null){
                    src = poiact.po_linkimg;
                }
                html = `<img class="popup" src="${src}" alt="Very Road Trip"><p>${name}</p>`;
                let htmlIcon = `<p>${name}</p>`;
                switch(poiact.po_type){
                    case 1: //activity 1
                        let myActIcon = L.divIcon({className: 'acticon', html: htmlIcon});
                        let markerActStatic = L.marker([poiact.po_latitude, poiact.po_longitude], {icon: myActIcon});
                        actStaticLayer.addLayer(markerActStatic).addTo(mymap);
                        markerActStatic.bindPopup(html);
                        break;
                    case 2: // POI == 2
                        let myPoiIcon = L.divIcon({className: 'poiicon', html: htmlIcon  });
                        let markerPoiStatic = L.marker([poiact.po_latitude, poiact.po_longitude], {icon: myPoiIcon});
                        poiStaticLayer.addLayer(markerPoiStatic).addTo(mymap);
                        markerPoiStatic.bindPopup(html,{});
                        break;
                }
            }

        });
    }
    return true;

}
mymap.on('popupopen', function(e) {
    recalcPoiAct = false; // set false every type after poupopen
});

mymap.on('moveend', function (e) {
    if(recalcPoiAct == true){
        getPoiStaticMap();
    }
    recalcPoiAct = true; // set true every type after moveend
});


mymap.on('locationfound', onLocationFound); //call show circle radius when locate
// show map
mymap.locate({setView: true, maxZoom: 16}); // show map when open



//SEND parameters to navigation simulator
$(document).on('click','#navigation',function(e){
    e.preventDefault();
    const method = "post"; // Set method to post by default if not specified.
    const path = `${location.protocol}//${document.location.hostname}:9966`;
    //const path = "https://vrt-navigation-sim.herokuapp.com/";
    let params = new Object();
    params["departure"] = departureNavApp;
    params["arrival"] = arrivalNavApp;
    params["waypoints"] = pointActivityNavApp;
    // The rest of this code assumes you are not using a library.
    // It can be made less wordy if you use one.
    let form = document.createElement("form");
    form.setAttribute("method", method);
    form.setAttribute("action", path);
    for(let key in params) {
        if(params.hasOwnProperty(key)) {
            var hiddenField = document.createElement("input");
            hiddenField.setAttribute("type", "hidden");
            hiddenField.setAttribute("name", key);
            if(key == "waypoints"){
                hiddenField.setAttribute("value", JSON.stringify( params[key] ));
            } else{
                hiddenField.setAttribute("value", JSON.stringify( {"latitude":params[key].lat,"longitude":params[key].lng} ) );
            }
            form.appendChild(hiddenField);
        }
    }
    document.body.appendChild(form);
    form.submit();

   //window.location.href = path;
    return false;
});



</script>
</body>
</html>